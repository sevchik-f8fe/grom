// здесь пишешь импорты
import { nanoid } from "nanoid";
//nanoid генерирует случайный ключ который нужен для реакта при рендере через перебор

// обязательно называй компоненты с большой буквы
const HomePage = () => {
    return (

        // можно возвращать только один блок то есть это вызовет ошибку:

        /*
        return (
            <>первый</>
            <>второй</>
        )
        */

        // а это нет:
        <>
            <div className="class">
                <YourChildElement text={'текст'} />
            </div>
            <div>
                <p>домашняя</p>
                {//тут показано как можно отрисовыать одинаковые элементы, если тебе это понадобиться
                    //например гдето есть массив данных и ты таким образом превращаешь его в компоненты, а данные передаеш в пропсы или в сам компонет
                    [1, 2, 3, 4, 5].map((elem) => <p key={nanoid()}>{elem}</p>)}
            </div>

            {/*также можно делать компоненты без пропсов но с содержимым (смотри ниже) */}
            <BlockComponent>
                <p>смотри ниже</p>
            </BlockComponent>
        </>

        /*
        так тоже можно


        <div className="class">
            <div></div>
            <div>домашняя</div>
        </div>
        */
    );
}

// для удобства можно создать новый компонент который будет доступен только в этом файле

// пропсы - то, что ты передаеш внутри круглых скобок

/*
можно писать так: 

const YourChildElement = (props) => {
    return (
        <p>{props.text}</p>
    )
}

можно так:
*/
const YourChildElement = ({ text }) => {
    return (
        <p>{text}</p>
    )
}

// для того чтобы сделать компонент с какимто содержимым, которое будет заполняться при его вызове, нужно передать пропс children
const BlockComponent = ({ children }) => {
    return (
        <div>{children}</div>
    )
}

//экспорт главного компонета чтобы потом получить его в main.jsx
export default HomePage;